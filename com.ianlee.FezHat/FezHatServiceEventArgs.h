//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace ianlee { namespace FezHat {

// Methods
public ref class FezHatSetRedLedStateCalledEventArgs sealed
{
public:
    FezHatSetRedLedStateCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool interfaceMemberOn);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property FezHatSetRedLedStateResult^ Result
    {
        FezHatSetRedLedStateResult^ get() { return m_result; }
        void set(_In_ FezHatSetRedLedStateResult^ value) { m_result = value; }
    }

    property bool On
    {
        bool get() { return m_interfaceMemberOn; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<FezHatSetRedLedStateResult^>^ GetResultAsync(FezHatSetRedLedStateCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<FezHatSetRedLedStateResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<FezHatSetRedLedStateResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    FezHatSetRedLedStateResult^ m_result;
    bool m_interfaceMemberOn;
};

public ref class FezHatGetRedLedStateCalledEventArgs sealed
{
public:
    FezHatGetRedLedStateCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property FezHatGetRedLedStateResult^ Result
    {
        FezHatGetRedLedStateResult^ get() { return m_result; }
        void set(_In_ FezHatGetRedLedStateResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<FezHatGetRedLedStateResult^>^ GetResultAsync(FezHatGetRedLedStateCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<FezHatGetRedLedStateResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<FezHatGetRedLedStateResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    FezHatGetRedLedStateResult^ m_result;
};

public ref class FezHatSetRgbLedD2ColorCalledEventArgs sealed
{
public:
    FezHatSetRgbLedD2ColorCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool interfaceMemberOn, _In_ byte interfaceMemberRed, _In_ byte interfaceMemberGreen, _In_ byte interfaceMemberBlue);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property FezHatSetRgbLedD2ColorResult^ Result
    {
        FezHatSetRgbLedD2ColorResult^ get() { return m_result; }
        void set(_In_ FezHatSetRgbLedD2ColorResult^ value) { m_result = value; }
    }

    property bool On
    {
        bool get() { return m_interfaceMemberOn; }
    }

    property byte Red
    {
        byte get() { return m_interfaceMemberRed; }
    }

    property byte Green
    {
        byte get() { return m_interfaceMemberGreen; }
    }

    property byte Blue
    {
        byte get() { return m_interfaceMemberBlue; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<FezHatSetRgbLedD2ColorResult^>^ GetResultAsync(FezHatSetRgbLedD2ColorCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<FezHatSetRgbLedD2ColorResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<FezHatSetRgbLedD2ColorResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    FezHatSetRgbLedD2ColorResult^ m_result;
    bool m_interfaceMemberOn;
    byte m_interfaceMemberRed;
    byte m_interfaceMemberGreen;
    byte m_interfaceMemberBlue;
};

public ref class FezHatSetRgbLedD3ColorCalledEventArgs sealed
{
public:
    FezHatSetRgbLedD3ColorCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool interfaceMemberOn, _In_ byte interfaceMemberRed, _In_ byte interfaceMemberGreen, _In_ byte interfaceMemberBlue);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property FezHatSetRgbLedD3ColorResult^ Result
    {
        FezHatSetRgbLedD3ColorResult^ get() { return m_result; }
        void set(_In_ FezHatSetRgbLedD3ColorResult^ value) { m_result = value; }
    }

    property bool On
    {
        bool get() { return m_interfaceMemberOn; }
    }

    property byte Red
    {
        byte get() { return m_interfaceMemberRed; }
    }

    property byte Green
    {
        byte get() { return m_interfaceMemberGreen; }
    }

    property byte Blue
    {
        byte get() { return m_interfaceMemberBlue; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<FezHatSetRgbLedD3ColorResult^>^ GetResultAsync(FezHatSetRgbLedD3ColorCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<FezHatSetRgbLedD3ColorResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<FezHatSetRgbLedD3ColorResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    FezHatSetRgbLedD3ColorResult^ m_result;
    bool m_interfaceMemberOn;
    byte m_interfaceMemberRed;
    byte m_interfaceMemberGreen;
    byte m_interfaceMemberBlue;
};

public ref class FezHatGetLightSensorValueCalledEventArgs sealed
{
public:
    FezHatGetLightSensorValueCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property FezHatGetLightSensorValueResult^ Result
    {
        FezHatGetLightSensorValueResult^ get() { return m_result; }
        void set(_In_ FezHatGetLightSensorValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<FezHatGetLightSensorValueResult^>^ GetResultAsync(FezHatGetLightSensorValueCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<FezHatGetLightSensorValueResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<FezHatGetLightSensorValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    FezHatGetLightSensorValueResult^ m_result;
};

public ref class FezHatGetTemperatureSensorValueCalledEventArgs sealed
{
public:
    FezHatGetTemperatureSensorValueCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property FezHatGetTemperatureSensorValueResult^ Result
    {
        FezHatGetTemperatureSensorValueResult^ get() { return m_result; }
        void set(_In_ FezHatGetTemperatureSensorValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<FezHatGetTemperatureSensorValueResult^>^ GetResultAsync(FezHatGetTemperatureSensorValueCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<FezHatGetTemperatureSensorValueResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<FezHatGetTemperatureSensorValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    FezHatGetTemperatureSensorValueResult^ m_result;
};

// Readable Properties
// Writable Properties
} } } 
